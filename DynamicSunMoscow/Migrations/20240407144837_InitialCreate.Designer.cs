// <auto-generated />
using System;
using Infrastructure.Base.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DynamicSunMoscow.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240407144837_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.Weather", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CloudBase")
                        .HasColumnType("int");

                    b.Property<int?>("Cloudiness")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("DewPoint")
                        .HasColumnType("real");

                    b.Property<int?>("HorizontalVisibility")
                        .HasColumnType("int");

                    b.Property<int>("Humidity")
                        .HasColumnType("int");

                    b.Property<string>("HumidityString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pressure")
                        .HasColumnType("int");

                    b.Property<float>("Temprature")
                        .HasColumnType("real");

                    b.Property<int>("WindSpeed")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_WeatherId");

                    b.ToTable("Weathers");
                });

            modelBuilder.Entity("Domain.Entities.WindDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WeatherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_WindDirectionId");

                    b.HasIndex("WeatherId");

                    b.ToTable("WindDirections");
                });

            modelBuilder.Entity("Domain.Entities.WindDirection", b =>
                {
                    b.HasOne("Domain.Entities.Weather", null)
                        .WithMany("WindDirections")
                        .HasForeignKey("WeatherId");
                });

            modelBuilder.Entity("Domain.Entities.Weather", b =>
                {
                    b.Navigation("WindDirections");
                });
#pragma warning restore 612, 618
        }
    }
}
